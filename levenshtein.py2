"""
This solution works, but is way too slow. 
For the Levenshtein CodeEval challenge, there is a 10 seconds time out.
"""

import sys, doctest
from collections import defaultdict


def levenshtein(a, b):
    """Calculates the Levenshtein distance between a and b.
    From http://hetland.org/coding/python/levenshtein.py
    >>> levenshtein("kitten", "sitting")
    3
    >>> levenshtein("kitten", "sitten")
    1
    >>> levenshtein("sittin", "sitting")
    1
    """
    n, m = len(a), len(b)
    if n > m:
        # Make sure n <= m, to use O(min(n,m)) space
        a,b = b,a
        n,m = m,n
        
    current = range(n+1)
    for i in range(1,m+1):
        previous, current = current, [i]+[0]*n
        for j in range(1,n+1):
            add, delete = previous[j]+1, current[j-1]+1
            change = previous[j-1]
            if a[j-1] != b[i-1]:
                change = change + 1
            current[j] = min(add, delete, change)
            
    return current[n]

def edits1(word):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    splits     = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    deletes    = [a + b[1:] for a, b in splits if b]
    replaces   = [a + c + b[1:] for a, b in splits for c in alphabet if b]
    return set(deletes + replaces) - set([word])

def is_levenshtein_1(a, b):
    """
    >>> is_levenshtein_1("alpha", "lpha")
    True
    >>> is_levenshtein_1("alpha", "alphb")
    True
    >>> is_levenshtein_1("alpha", "alpbb")
    False
    >>> is_levenshtein_1("alpha", "alpha")
    False
    """

    return levenshtein(a, b) == 1
    # I tried the following code, it is slower ...
    if len(a) > len(b):
        longer = a
        shorter = b
    else:
        longer = b
        shorter = a
    return shorter in edits1(longer)

def find_father(word, sns):
    for father, sn in sns.iteritems():
        if word in sn:
            return father
    return None

def main():
    test_cases = open(sys.argv[1], 'r')

    tests = []
    still_tests = True
    sn = defaultdict(lambda: []) 
    explored = []
    to_explore = []
    for test in test_cases:
        test = test.strip()
        if still_tests:
            if test == "END OF INPUT":
                still_tests = False
                continue
            tests.append(test)
        else:
            #raise Exception(tests)
            word = test
            for ctest in tests:
                if is_levenshtein_1(ctest, word):
                    print word, ctest
                    sn[ctest].append(word)
                    to_explore.append(word)
    explored.extend(tests)
    #print tests
    #print to_explore
    #print explored


    # Now let's start exploring the sn's
    while len(to_explore) > 0:
        test_cases.close()
        test_cases = open(sys.argv[1], 'r')
        still_tests = True
        to_explore_again = []
        for word in test_cases: 
            word = word.strip()
            if still_tests:
                if word == "END OF INPUT":
                    still_tests = False
                    continue
            else:
                for eword in to_explore:
                    if word not in explored and word != eword and word not in tests and word not in sn[eword] and is_levenshtein_1(eword, word):
                        father = find_father(eword, sn)
                        if word not in sn[father]:
                            sn[father].append(word)
                            to_explore_again.append(word)
        explored.extend(to_explore)
        to_explore = to_explore_again
        print to_explore_again
            
    #import pprint
    #pprint.pprint(sn)
    for test in tests:
        print len(sn[test])

    test_cases.close()

if len(sys.argv) == 1:
    doctest.testmod()
else:
    main()
